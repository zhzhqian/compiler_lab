Terminals unused in grammar

   CONST


Grammar

    0 $accept: starter $end

    1 starter: starter builder
    2        | builder

    3 builder: function
    4        | declaration

    5 $@1: %empty

    6 $@2: %empty

    7 function: type identifier $@1 '(' argument_list ')' $@2 compound_stmt

    8 type: data_type pointer
    9     | data_type

   10 pointer: '*' pointer
   11        | '*'

   12 data_type: sign_specifier type_specifier
   13          | type_specifier

   14 sign_specifier: SIGNED
   15               | UNSIGNED

   16 type_specifier: INT
   17               | SHORT INT
   18               | SHORT
   19               | LONG
   20               | LONG INT
   21               | LONG_LONG
   22               | LONG_LONG INT
   23               | CHAR
   24               | FLOAT
   25               | VOID
   26               | CHAR_STAR

   27 argument_list: arguments
   28              | %empty

   29 arguments: arguments ',' arg
   30          | arg

   31 arg: type identifier

   32 stmt: compound_stmt
   33     | single_stmt

   34 $@3: %empty

   35 compound_stmt: '{' $@3 statements '}'

   36 statements: statements M stmt
   37           | %empty

   38 single_stmt: if_block
   39            | for_block
   40            | while_block
   41            | declaration
   42            | function_call ';'
   43            | RETURN ';'
   44            | CONTINUE ';'
   45            | BREAK ';'
   46            | RETURN sub_expr ';'

   47 $@4: %empty

   48 $@5: %empty

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5

   50 if_block: IF '(' expression ')' M stmt
   51         | IF '(' expression ')' M stmt ELSE N M stmt

   52 $@6: %empty

   53 $@7: %empty

   54 while_block: WHILE M '(' expression ')' M $@6 stmt $@7

   55 declaration: type declaration_list ';'
   56            | declaration_list ';'
   57            | unary_expr ';'

   58 declaration_list: declaration_list ',' sub_decl
   59                 | sub_decl

   60 sub_decl: assignment_expr
   61         | identifier
   62         | array_access

   63 expression_stmt: expression ';'
   64                | ';'

   65 expression: expression ',' sub_expr
   66           | sub_expr

   67 sub_expr: sub_expr '>' sub_expr
   68         | sub_expr '<' sub_expr
   69         | sub_expr EQ sub_expr
   70         | sub_expr NOT_EQ sub_expr
   71         | sub_expr GR_EQ sub_expr
   72         | sub_expr LS_EQ sub_expr
   73         | sub_expr LOGICAL_AND M sub_expr
   74         | sub_expr LOGICAL_OR M sub_expr
   75         | '!' sub_expr
   76         | arithmetic_expr
   77         | assignment_expr
   78         | unary_expr

   79 assignment_expr: lhs assign arithmetic_expr
   80                | lhs assign array_access
   81                | lhs assign function_call
   82                | lhs assign unary_expr

   83 unary_expr: identifier INCREMENT
   84           | identifier DECREMENT
   85           | DECREMENT identifier
   86           | INCREMENT identifier

   87 lhs: identifier
   88    | array_access

   89 identifier: IDENTIFIER

   90 assign: '='
   91       | ADD_ASSIGN
   92       | SUB_ASSIGN
   93       | MUL_ASSIGN
   94       | DIV_ASSIGN
   95       | MOD_ASSIGN

   96 arithmetic_expr: arithmetic_expr '+' arithmetic_expr
   97                | arithmetic_expr '-' arithmetic_expr
   98                | arithmetic_expr '*' arithmetic_expr
   99                | arithmetic_expr '/' arithmetic_expr
  100                | arithmetic_expr '%' arithmetic_expr
  101                | '(' arithmetic_expr ')'
  102                | '-' arithmetic_expr
  103                | identifier
  104                | constant

  105 constant: DEC_CONSTANT
  106         | HEX_CONSTANT
  107         | CHAR_CONSTANT
  108         | FLOAT_CONSTANT

  109 array_access: identifier '[' array_index ']'

  110 array_index: constant
  111            | identifier

  112 function_call: identifier '(' parameter_list ')'
  113              | identifier '(' ')'

  114 parameter_list: parameter_list ',' parameter
  115               | parameter

  116 parameter: sub_expr
  117          | STRING

  118 M: %empty

  119 N: %empty


Terminals, with rules where they appear

$end (0) 0
'!' (33) 75
'%' (37) 100
'(' (40) 7 49 50 51 54 101 112 113
')' (41) 7 49 50 51 54 101 112 113
'*' (42) 10 11 98
'+' (43) 96
',' (44) 29 58 65 114
'-' (45) 97 102
'/' (47) 99
';' (59) 42 43 44 45 46 55 56 57 63 64
'<' (60) 68
'=' (61) 90
'>' (62) 67
'[' (91) 109
']' (93) 109
'{' (123) 35
'}' (125) 35
error (256)
IDENTIFIER (258) 89
DEC_CONSTANT (259) 105
HEX_CONSTANT (260) 106
CHAR_CONSTANT (261) 107
FLOAT_CONSTANT (262) 108
STRING (263) 117
LOGICAL_AND (264) 73
LOGICAL_OR (265) 74
LS_EQ (266) 72
GR_EQ (267) 71
EQ (268) 69
NOT_EQ (269) 70
MUL_ASSIGN (270) 93
DIV_ASSIGN (271) 94
MOD_ASSIGN (272) 95
ADD_ASSIGN (273) 91
SUB_ASSIGN (274) 92
INCREMENT (275) 83 86
DECREMENT (276) 84 85
SHORT (277) 17 18
INT (278) 16 17 20 22
LONG (279) 19 20
LONG_LONG (280) 21 22
SIGNED (281) 14
UNSIGNED (282) 15
CONST (283)
VOID (284) 25
CHAR (285) 23
FLOAT (286) 24
CHAR_STAR (287) 26
IF (288) 50 51
FOR (289) 49
WHILE (290) 54
CONTINUE (291) 44
BREAK (292) 45
RETURN (293) 43 46
UMINUS (294)
LOWER_THAN_ELSE (295)
ELSE (296) 51


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
starter (60)
    on left: 1 2, on right: 0 1
builder (61)
    on left: 3 4, on right: 1 2
function (62)
    on left: 7, on right: 3
$@1 (63)
    on left: 5, on right: 7
$@2 (64)
    on left: 6, on right: 7
type (65)
    on left: 8 9, on right: 7 31 55
pointer (66)
    on left: 10 11, on right: 8 10
data_type (67)
    on left: 12 13, on right: 8 9
sign_specifier (68)
    on left: 14 15, on right: 12
type_specifier (69)
    on left: 16 17 18 19 20 21 22 23 24 25 26, on right: 12 13
argument_list (70)
    on left: 27 28, on right: 7
arguments (71)
    on left: 29 30, on right: 27 29
arg (72)
    on left: 31, on right: 29 30
stmt (73)
    on left: 32 33, on right: 36 49 50 51 54
compound_stmt (74)
    on left: 35, on right: 7 32
$@3 (75)
    on left: 34, on right: 35
statements (76)
    on left: 36 37, on right: 35 36
single_stmt (77)
    on left: 38 39 40 41 42 43 44 45 46, on right: 33
for_block (78)
    on left: 49, on right: 39
$@4 (79)
    on left: 47, on right: 49
$@5 (80)
    on left: 48, on right: 49
if_block (81)
    on left: 50 51, on right: 38
while_block (82)
    on left: 54, on right: 40
$@6 (83)
    on left: 52, on right: 54
$@7 (84)
    on left: 53, on right: 54
declaration (85)
    on left: 55 56 57, on right: 4 41
declaration_list (86)
    on left: 58 59, on right: 55 56 58
sub_decl (87)
    on left: 60 61 62, on right: 58 59
expression_stmt (88)
    on left: 63 64, on right: 49
expression (89)
    on left: 65 66, on right: 49 50 51 54 63 65
sub_expr (90)
    on left: 67 68 69 70 71 72 73 74 75 76 77 78, on right: 46 65 66
    67 68 69 70 71 72 73 74 75 116
assignment_expr (91)
    on left: 79 80 81 82, on right: 60 77
unary_expr (92)
    on left: 83 84 85 86, on right: 57 78 82
lhs (93)
    on left: 87 88, on right: 79 80 81 82
identifier (94)
    on left: 89, on right: 7 31 61 83 84 85 86 87 103 109 111 112 113
assign (95)
    on left: 90 91 92 93 94 95, on right: 79 80 81 82
arithmetic_expr (96)
    on left: 96 97 98 99 100 101 102 103 104, on right: 76 79 96 97
    98 99 100 101 102
constant (97)
    on left: 105 106 107 108, on right: 104 110
array_access (98)
    on left: 109, on right: 62 80 88
array_index (99)
    on left: 110 111, on right: 109
function_call (100)
    on left: 112 113, on right: 42 81
parameter_list (101)
    on left: 114 115, on right: 112 114
parameter (102)
    on left: 116 117, on right: 114 115
M (103)
    on left: 118, on right: 36 49 50 51 54 73 74
N (104)
    on left: 119, on right: 49 51


State 0

    0 $accept: . starter $end

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13

    starter           go to state 14
    builder           go to state 15
    function          go to state 16
    type              go to state 17
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    declaration       go to state 21
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 27
    array_access      go to state 28


State 1

   89 identifier: IDENTIFIER .

    $default  reduce using rule 89 (identifier)


State 2

   86 unary_expr: INCREMENT . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 29


State 3

   85 unary_expr: DECREMENT . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 30


State 4

   17 type_specifier: SHORT . INT
   18               | SHORT .

    INT  shift, and go to state 31

    $default  reduce using rule 18 (type_specifier)


State 5

   16 type_specifier: INT .

    $default  reduce using rule 16 (type_specifier)


State 6

   19 type_specifier: LONG .
   20               | LONG . INT

    INT  shift, and go to state 32

    $default  reduce using rule 19 (type_specifier)


State 7

   21 type_specifier: LONG_LONG .
   22               | LONG_LONG . INT

    INT  shift, and go to state 33

    $default  reduce using rule 21 (type_specifier)


State 8

   14 sign_specifier: SIGNED .

    $default  reduce using rule 14 (sign_specifier)


State 9

   15 sign_specifier: UNSIGNED .

    $default  reduce using rule 15 (sign_specifier)


State 10

   25 type_specifier: VOID .

    $default  reduce using rule 25 (type_specifier)


State 11

   23 type_specifier: CHAR .

    $default  reduce using rule 23 (type_specifier)


State 12

   24 type_specifier: FLOAT .

    $default  reduce using rule 24 (type_specifier)


State 13

   26 type_specifier: CHAR_STAR .

    $default  reduce using rule 26 (type_specifier)


State 14

    0 $accept: starter . $end
    1 starter: starter . builder

    $end        shift, and go to state 34
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13

    builder           go to state 35
    function          go to state 16
    type              go to state 17
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    declaration       go to state 21
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 27
    array_access      go to state 28


State 15

    2 starter: builder .

    $default  reduce using rule 2 (starter)


State 16

    3 builder: function .

    $default  reduce using rule 3 (builder)


State 17

    7 function: type . identifier $@1 '(' argument_list ')' $@2 compound_stmt
   55 declaration: type . declaration_list ';'

    IDENTIFIER  shift, and go to state 1

    declaration_list  go to state 36
    sub_decl          go to state 23
    assignment_expr   go to state 24
    lhs               go to state 26
    identifier        go to state 37
    array_access      go to state 28


State 18

    8 type: data_type . pointer
    9     | data_type .

    '*'  shift, and go to state 38

    $default  reduce using rule 9 (type)

    pointer  go to state 39


State 19

   12 data_type: sign_specifier . type_specifier

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    VOID       shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    CHAR_STAR  shift, and go to state 13

    type_specifier  go to state 40


State 20

   13 data_type: type_specifier .

    $default  reduce using rule 13 (data_type)


State 21

    4 builder: declaration .

    $default  reduce using rule 4 (builder)


State 22

   56 declaration: declaration_list . ';'
   58 declaration_list: declaration_list . ',' sub_decl

    ','  shift, and go to state 41
    ';'  shift, and go to state 42


State 23

   59 declaration_list: sub_decl .

    $default  reduce using rule 59 (declaration_list)


State 24

   60 sub_decl: assignment_expr .

    $default  reduce using rule 60 (sub_decl)


State 25

   57 declaration: unary_expr . ';'

    ';'  shift, and go to state 43


State 26

   79 assignment_expr: lhs . assign arithmetic_expr
   80                | lhs . assign array_access
   81                | lhs . assign function_call
   82                | lhs . assign unary_expr

    MUL_ASSIGN  shift, and go to state 44
    DIV_ASSIGN  shift, and go to state 45
    MOD_ASSIGN  shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    '='         shift, and go to state 49

    assign  go to state 50


State 27

   61 sub_decl: identifier .
   83 unary_expr: identifier . INCREMENT
   84           | identifier . DECREMENT
   87 lhs: identifier .
  109 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 51
    DECREMENT  shift, and go to state 52
    '['        shift, and go to state 53

    ','       reduce using rule 61 (sub_decl)
    ';'       reduce using rule 61 (sub_decl)
    $default  reduce using rule 87 (lhs)


State 28

   62 sub_decl: array_access .
   88 lhs: array_access .

    ','       reduce using rule 62 (sub_decl)
    ';'       reduce using rule 62 (sub_decl)
    $default  reduce using rule 88 (lhs)


State 29

   86 unary_expr: INCREMENT identifier .

    $default  reduce using rule 86 (unary_expr)


State 30

   85 unary_expr: DECREMENT identifier .

    $default  reduce using rule 85 (unary_expr)


State 31

   17 type_specifier: SHORT INT .

    $default  reduce using rule 17 (type_specifier)


State 32

   20 type_specifier: LONG INT .

    $default  reduce using rule 20 (type_specifier)


State 33

   22 type_specifier: LONG_LONG INT .

    $default  reduce using rule 22 (type_specifier)


State 34

    0 $accept: starter $end .

    $default  accept


State 35

    1 starter: starter builder .

    $default  reduce using rule 1 (starter)


State 36

   55 declaration: type declaration_list . ';'
   58 declaration_list: declaration_list . ',' sub_decl

    ','  shift, and go to state 41
    ';'  shift, and go to state 54


State 37

    7 function: type identifier . $@1 '(' argument_list ')' $@2 compound_stmt
   61 sub_decl: identifier .
   87 lhs: identifier .
  109 array_access: identifier . '[' array_index ']'

    '['  shift, and go to state 53

    ','       reduce using rule 61 (sub_decl)
    '('       reduce using rule 5 ($@1)
    ';'       reduce using rule 61 (sub_decl)
    $default  reduce using rule 87 (lhs)

    $@1  go to state 55


State 38

   10 pointer: '*' . pointer
   11        | '*' .

    '*'  shift, and go to state 38

    $default  reduce using rule 11 (pointer)

    pointer  go to state 56


State 39

    8 type: data_type pointer .

    $default  reduce using rule 8 (type)


State 40

   12 data_type: sign_specifier type_specifier .

    $default  reduce using rule 12 (data_type)


State 41

   58 declaration_list: declaration_list ',' . sub_decl

    IDENTIFIER  shift, and go to state 1

    sub_decl         go to state 57
    assignment_expr  go to state 24
    lhs              go to state 26
    identifier       go to state 58
    array_access     go to state 28


State 42

   56 declaration: declaration_list ';' .

    $default  reduce using rule 56 (declaration)


State 43

   57 declaration: unary_expr ';' .

    $default  reduce using rule 57 (declaration)


State 44

   93 assign: MUL_ASSIGN .

    $default  reduce using rule 93 (assign)


State 45

   94 assign: DIV_ASSIGN .

    $default  reduce using rule 94 (assign)


State 46

   95 assign: MOD_ASSIGN .

    $default  reduce using rule 95 (assign)


State 47

   91 assign: ADD_ASSIGN .

    $default  reduce using rule 91 (assign)


State 48

   92 assign: SUB_ASSIGN .

    $default  reduce using rule 92 (assign)


State 49

   90 assign: '=' .

    $default  reduce using rule 90 (assign)


State 50

   79 assignment_expr: lhs assign . arithmetic_expr
   80                | lhs assign . array_access
   81                | lhs assign . function_call
   82                | lhs assign . unary_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '('             shift, and go to state 64

    unary_expr       go to state 65
    identifier       go to state 66
    arithmetic_expr  go to state 67
    constant         go to state 68
    array_access     go to state 69
    function_call    go to state 70


State 51

   83 unary_expr: identifier INCREMENT .

    $default  reduce using rule 83 (unary_expr)


State 52

   84 unary_expr: identifier DECREMENT .

    $default  reduce using rule 84 (unary_expr)


State 53

  109 array_access: identifier '[' . array_index ']'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62

    identifier   go to state 71
    constant     go to state 72
    array_index  go to state 73


State 54

   55 declaration: type declaration_list ';' .

    $default  reduce using rule 55 (declaration)


State 55

    7 function: type identifier $@1 . '(' argument_list ')' $@2 compound_stmt

    '('  shift, and go to state 74


State 56

   10 pointer: '*' pointer .

    $default  reduce using rule 10 (pointer)


State 57

   58 declaration_list: declaration_list ',' sub_decl .

    $default  reduce using rule 58 (declaration_list)


State 58

   61 sub_decl: identifier .
   87 lhs: identifier .
  109 array_access: identifier . '[' array_index ']'

    '['  shift, and go to state 53

    ','       reduce using rule 61 (sub_decl)
    ';'       reduce using rule 61 (sub_decl)
    $default  reduce using rule 87 (lhs)


State 59

  105 constant: DEC_CONSTANT .

    $default  reduce using rule 105 (constant)


State 60

  106 constant: HEX_CONSTANT .

    $default  reduce using rule 106 (constant)


State 61

  107 constant: CHAR_CONSTANT .

    $default  reduce using rule 107 (constant)


State 62

  108 constant: FLOAT_CONSTANT .

    $default  reduce using rule 108 (constant)


State 63

  102 arithmetic_expr: '-' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    '-'             shift, and go to state 63
    '('             shift, and go to state 64

    identifier       go to state 75
    arithmetic_expr  go to state 76
    constant         go to state 68


State 64

  101 arithmetic_expr: '(' . arithmetic_expr ')'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    '-'             shift, and go to state 63
    '('             shift, and go to state 64

    identifier       go to state 75
    arithmetic_expr  go to state 77
    constant         go to state 68


State 65

   82 assignment_expr: lhs assign unary_expr .

    $default  reduce using rule 82 (assignment_expr)


State 66

   83 unary_expr: identifier . INCREMENT
   84           | identifier . DECREMENT
  103 arithmetic_expr: identifier .
  109 array_access: identifier . '[' array_index ']'
  112 function_call: identifier . '(' parameter_list ')'
  113              | identifier . '(' ')'

    INCREMENT  shift, and go to state 51
    DECREMENT  shift, and go to state 52
    '('        shift, and go to state 78
    '['        shift, and go to state 53

    $default  reduce using rule 103 (arithmetic_expr)


State 67

   79 assignment_expr: lhs assign arithmetic_expr .
   96 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   97                | arithmetic_expr . '-' arithmetic_expr
   98                | arithmetic_expr . '*' arithmetic_expr
   99                | arithmetic_expr . '/' arithmetic_expr
  100                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83

    $default  reduce using rule 79 (assignment_expr)


State 68

  104 arithmetic_expr: constant .

    $default  reduce using rule 104 (arithmetic_expr)


State 69

   80 assignment_expr: lhs assign array_access .

    $default  reduce using rule 80 (assignment_expr)


State 70

   81 assignment_expr: lhs assign function_call .

    $default  reduce using rule 81 (assignment_expr)


State 71

  111 array_index: identifier .

    $default  reduce using rule 111 (array_index)


State 72

  110 array_index: constant .

    $default  reduce using rule 110 (array_index)


State 73

  109 array_access: identifier '[' array_index . ']'

    ']'  shift, and go to state 84


State 74

    7 function: type identifier $@1 '(' . argument_list ')' $@2 compound_stmt

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9
    VOID       shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    CHAR_STAR  shift, and go to state 13

    $default  reduce using rule 28 (argument_list)

    type            go to state 85
    data_type       go to state 18
    sign_specifier  go to state 19
    type_specifier  go to state 20
    argument_list   go to state 86
    arguments       go to state 87
    arg             go to state 88


State 75

  103 arithmetic_expr: identifier .

    $default  reduce using rule 103 (arithmetic_expr)


State 76

   96 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   97                | arithmetic_expr . '-' arithmetic_expr
   98                | arithmetic_expr . '*' arithmetic_expr
   99                | arithmetic_expr . '/' arithmetic_expr
  100                | arithmetic_expr . '%' arithmetic_expr
  102                | '-' arithmetic_expr .

    $default  reduce using rule 102 (arithmetic_expr)


State 77

   96 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   97                | arithmetic_expr . '-' arithmetic_expr
   98                | arithmetic_expr . '*' arithmetic_expr
   99                | arithmetic_expr . '/' arithmetic_expr
  100                | arithmetic_expr . '%' arithmetic_expr
  101                | '(' arithmetic_expr . ')'

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    ')'  shift, and go to state 89


State 78

  112 function_call: identifier '(' . parameter_list ')'
  113              | identifier '(' . ')'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    STRING          shift, and go to state 90
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64
    ')'             shift, and go to state 92

    sub_expr         go to state 93
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98
    parameter_list   go to state 99
    parameter        go to state 100


State 79

   96 arithmetic_expr: arithmetic_expr '+' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    '-'             shift, and go to state 63
    '('             shift, and go to state 64

    identifier       go to state 75
    arithmetic_expr  go to state 101
    constant         go to state 68


State 80

   97 arithmetic_expr: arithmetic_expr '-' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    '-'             shift, and go to state 63
    '('             shift, and go to state 64

    identifier       go to state 75
    arithmetic_expr  go to state 102
    constant         go to state 68


State 81

   98 arithmetic_expr: arithmetic_expr '*' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    '-'             shift, and go to state 63
    '('             shift, and go to state 64

    identifier       go to state 75
    arithmetic_expr  go to state 103
    constant         go to state 68


State 82

   99 arithmetic_expr: arithmetic_expr '/' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    '-'             shift, and go to state 63
    '('             shift, and go to state 64

    identifier       go to state 75
    arithmetic_expr  go to state 104
    constant         go to state 68


State 83

  100 arithmetic_expr: arithmetic_expr '%' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    '-'             shift, and go to state 63
    '('             shift, and go to state 64

    identifier       go to state 75
    arithmetic_expr  go to state 105
    constant         go to state 68


State 84

  109 array_access: identifier '[' array_index ']' .

    $default  reduce using rule 109 (array_access)


State 85

   31 arg: type . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 106


State 86

    7 function: type identifier $@1 '(' argument_list . ')' $@2 compound_stmt

    ')'  shift, and go to state 107


State 87

   27 argument_list: arguments .
   29 arguments: arguments . ',' arg

    ','  shift, and go to state 108

    $default  reduce using rule 27 (argument_list)


State 88

   30 arguments: arg .

    $default  reduce using rule 30 (arguments)


State 89

  101 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 101 (arithmetic_expr)


State 90

  117 parameter: STRING .

    $default  reduce using rule 117 (parameter)


State 91

   75 sub_expr: '!' . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 109
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 92

  113 function_call: identifier '(' ')' .

    $default  reduce using rule 113 (function_call)


State 93

   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr
  116 parameter: sub_expr .

    LOGICAL_AND  shift, and go to state 110
    LOGICAL_OR   shift, and go to state 111
    LS_EQ        shift, and go to state 112
    GR_EQ        shift, and go to state 113
    EQ           shift, and go to state 114
    NOT_EQ       shift, and go to state 115
    '<'          shift, and go to state 116
    '>'          shift, and go to state 117

    $default  reduce using rule 116 (parameter)


State 94

   77 sub_expr: assignment_expr .

    $default  reduce using rule 77 (sub_expr)


State 95

   78 sub_expr: unary_expr .

    $default  reduce using rule 78 (sub_expr)


State 96

   83 unary_expr: identifier . INCREMENT
   84           | identifier . DECREMENT
   87 lhs: identifier .
  103 arithmetic_expr: identifier .
  109 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 51
    DECREMENT  shift, and go to state 52
    '['        shift, and go to state 53

    MUL_ASSIGN  reduce using rule 87 (lhs)
    DIV_ASSIGN  reduce using rule 87 (lhs)
    MOD_ASSIGN  reduce using rule 87 (lhs)
    ADD_ASSIGN  reduce using rule 87 (lhs)
    SUB_ASSIGN  reduce using rule 87 (lhs)
    '='         reduce using rule 87 (lhs)
    $default    reduce using rule 103 (arithmetic_expr)


State 97

   76 sub_expr: arithmetic_expr .
   96 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   97                | arithmetic_expr . '-' arithmetic_expr
   98                | arithmetic_expr . '*' arithmetic_expr
   99                | arithmetic_expr . '/' arithmetic_expr
  100                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83

    $default  reduce using rule 76 (sub_expr)


State 98

   88 lhs: array_access .

    $default  reduce using rule 88 (lhs)


State 99

  112 function_call: identifier '(' parameter_list . ')'
  114 parameter_list: parameter_list . ',' parameter

    ','  shift, and go to state 118
    ')'  shift, and go to state 119


State 100

  115 parameter_list: parameter .

    $default  reduce using rule 115 (parameter_list)


State 101

   96 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   96                | arithmetic_expr '+' arithmetic_expr .
   97                | arithmetic_expr . '-' arithmetic_expr
   98                | arithmetic_expr . '*' arithmetic_expr
   99                | arithmetic_expr . '/' arithmetic_expr
  100                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83

    $default  reduce using rule 96 (arithmetic_expr)


State 102

   96 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   97                | arithmetic_expr . '-' arithmetic_expr
   97                | arithmetic_expr '-' arithmetic_expr .
   98                | arithmetic_expr . '*' arithmetic_expr
   99                | arithmetic_expr . '/' arithmetic_expr
  100                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83

    $default  reduce using rule 97 (arithmetic_expr)


State 103

   96 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   97                | arithmetic_expr . '-' arithmetic_expr
   98                | arithmetic_expr . '*' arithmetic_expr
   98                | arithmetic_expr '*' arithmetic_expr .
   99                | arithmetic_expr . '/' arithmetic_expr
  100                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 98 (arithmetic_expr)


State 104

   96 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   97                | arithmetic_expr . '-' arithmetic_expr
   98                | arithmetic_expr . '*' arithmetic_expr
   99                | arithmetic_expr . '/' arithmetic_expr
   99                | arithmetic_expr '/' arithmetic_expr .
  100                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 99 (arithmetic_expr)


State 105

   96 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   97                | arithmetic_expr . '-' arithmetic_expr
   98                | arithmetic_expr . '*' arithmetic_expr
   99                | arithmetic_expr . '/' arithmetic_expr
  100                | arithmetic_expr . '%' arithmetic_expr
  100                | arithmetic_expr '%' arithmetic_expr .

    $default  reduce using rule 100 (arithmetic_expr)


State 106

   31 arg: type identifier .

    $default  reduce using rule 31 (arg)


State 107

    7 function: type identifier $@1 '(' argument_list ')' . $@2 compound_stmt

    $default  reduce using rule 6 ($@2)

    $@2  go to state 120


State 108

   29 arguments: arguments ',' . arg

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9
    VOID       shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    CHAR_STAR  shift, and go to state 13

    type            go to state 85
    data_type       go to state 18
    sign_specifier  go to state 19
    type_specifier  go to state 20
    arg             go to state 121


State 109

   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr
   75         | '!' sub_expr .

    $default  reduce using rule 75 (sub_expr)


State 110

   73 sub_expr: sub_expr LOGICAL_AND . M sub_expr

    $default  reduce using rule 118 (M)

    M  go to state 122


State 111

   74 sub_expr: sub_expr LOGICAL_OR . M sub_expr

    $default  reduce using rule 118 (M)

    M  go to state 123


State 112

   72 sub_expr: sub_expr LS_EQ . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 124
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 113

   71 sub_expr: sub_expr GR_EQ . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 125
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 114

   69 sub_expr: sub_expr EQ . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 126
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 115

   70 sub_expr: sub_expr NOT_EQ . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 127
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 116

   68 sub_expr: sub_expr '<' . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 128
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 117

   67 sub_expr: sub_expr '>' . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 129
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 118

  114 parameter_list: parameter_list ',' . parameter

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    STRING          shift, and go to state 90
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 93
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98
    parameter        go to state 130


State 119

  112 function_call: identifier '(' parameter_list ')' .

    $default  reduce using rule 112 (function_call)


State 120

    7 function: type identifier $@1 '(' argument_list ')' $@2 . compound_stmt

    '{'  shift, and go to state 131

    compound_stmt  go to state 132


State 121

   29 arguments: arguments ',' arg .

    $default  reduce using rule 29 (arguments)


State 122

   73 sub_expr: sub_expr LOGICAL_AND M . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 133
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 123

   74 sub_expr: sub_expr LOGICAL_OR M . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 134
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 124

   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   72         | sub_expr LS_EQ sub_expr .
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr

    $default  reduce using rule 72 (sub_expr)


State 125

   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   71         | sub_expr GR_EQ sub_expr .
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr

    $default  reduce using rule 71 (sub_expr)


State 126

   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   69         | sub_expr EQ sub_expr .
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr

    LS_EQ  shift, and go to state 112
    GR_EQ  shift, and go to state 113
    '<'    shift, and go to state 116
    '>'    shift, and go to state 117

    $default  reduce using rule 69 (sub_expr)


State 127

   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   70         | sub_expr NOT_EQ sub_expr .
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr

    LS_EQ  shift, and go to state 112
    GR_EQ  shift, and go to state 113
    '<'    shift, and go to state 116
    '>'    shift, and go to state 117

    $default  reduce using rule 70 (sub_expr)


State 128

   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   68         | sub_expr '<' sub_expr .
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr

    $default  reduce using rule 68 (sub_expr)


State 129

   67 sub_expr: sub_expr . '>' sub_expr
   67         | sub_expr '>' sub_expr .
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr

    $default  reduce using rule 67 (sub_expr)


State 130

  114 parameter_list: parameter_list ',' parameter .

    $default  reduce using rule 114 (parameter_list)


State 131

   35 compound_stmt: '{' . $@3 statements '}'

    $default  reduce using rule 34 ($@3)

    $@3  go to state 135


State 132

    7 function: type identifier $@1 '(' argument_list ')' $@2 compound_stmt .

    $default  reduce using rule 7 (function)


State 133

   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   73         | sub_expr LOGICAL_AND M sub_expr .
   74         | sub_expr . LOGICAL_OR M sub_expr

    LS_EQ   shift, and go to state 112
    GR_EQ   shift, and go to state 113
    EQ      shift, and go to state 114
    NOT_EQ  shift, and go to state 115
    '<'     shift, and go to state 116
    '>'     shift, and go to state 117

    $default  reduce using rule 73 (sub_expr)


State 134

   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr
   74         | sub_expr LOGICAL_OR M sub_expr .

    LOGICAL_AND  shift, and go to state 110
    LS_EQ        shift, and go to state 112
    GR_EQ        shift, and go to state 113
    EQ           shift, and go to state 114
    NOT_EQ       shift, and go to state 115
    '<'          shift, and go to state 116
    '>'          shift, and go to state 117

    $default  reduce using rule 74 (sub_expr)


State 135

   35 compound_stmt: '{' $@3 . statements '}'

    $default  reduce using rule 37 (statements)

    statements  go to state 136


State 136

   35 compound_stmt: '{' $@3 statements . '}'
   36 statements: statements . M stmt

    '}'  shift, and go to state 137

    $default  reduce using rule 118 (M)

    M  go to state 138


State 137

   35 compound_stmt: '{' $@3 statements '}' .

    $default  reduce using rule 35 (compound_stmt)


State 138

   36 statements: statements M . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 139
    FOR         shift, and go to state 140
    WHILE       shift, and go to state 141
    CONTINUE    shift, and go to state 142
    BREAK       shift, and go to state 143
    RETURN      shift, and go to state 144
    '{'         shift, and go to state 131

    type              go to state 145
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 146
    compound_stmt     go to state 147
    single_stmt       go to state 148
    for_block         go to state 149
    if_block          go to state 150
    while_block       go to state 151
    declaration       go to state 152
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 153
    array_access      go to state 28
    function_call     go to state 154


State 139

   50 if_block: IF . '(' expression ')' M stmt
   51         | IF . '(' expression ')' M stmt ELSE N M stmt

    '('  shift, and go to state 155


State 140

   49 for_block: FOR . '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5

    '('  shift, and go to state 156


State 141

   54 while_block: WHILE . M '(' expression ')' M $@6 stmt $@7

    $default  reduce using rule 118 (M)

    M  go to state 157


State 142

   44 single_stmt: CONTINUE . ';'

    ';'  shift, and go to state 158


State 143

   45 single_stmt: BREAK . ';'

    ';'  shift, and go to state 159


State 144

   43 single_stmt: RETURN . ';'
   46            | RETURN . sub_expr ';'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64
    ';'             shift, and go to state 160

    sub_expr         go to state 161
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 145

   55 declaration: type . declaration_list ';'

    IDENTIFIER  shift, and go to state 1

    declaration_list  go to state 36
    sub_decl          go to state 23
    assignment_expr   go to state 24
    lhs               go to state 26
    identifier        go to state 58
    array_access      go to state 28


State 146

   36 statements: statements M stmt .

    $default  reduce using rule 36 (statements)


State 147

   32 stmt: compound_stmt .

    $default  reduce using rule 32 (stmt)


State 148

   33 stmt: single_stmt .

    $default  reduce using rule 33 (stmt)


State 149

   39 single_stmt: for_block .

    $default  reduce using rule 39 (single_stmt)


State 150

   38 single_stmt: if_block .

    $default  reduce using rule 38 (single_stmt)


State 151

   40 single_stmt: while_block .

    $default  reduce using rule 40 (single_stmt)


State 152

   41 single_stmt: declaration .

    $default  reduce using rule 41 (single_stmt)


State 153

   61 sub_decl: identifier .
   83 unary_expr: identifier . INCREMENT
   84           | identifier . DECREMENT
   87 lhs: identifier .
  109 array_access: identifier . '[' array_index ']'
  112 function_call: identifier . '(' parameter_list ')'
  113              | identifier . '(' ')'

    INCREMENT  shift, and go to state 51
    DECREMENT  shift, and go to state 52
    '('        shift, and go to state 78
    '['        shift, and go to state 53

    ','       reduce using rule 61 (sub_decl)
    ';'       reduce using rule 61 (sub_decl)
    $default  reduce using rule 87 (lhs)


State 154

   42 single_stmt: function_call . ';'

    ';'  shift, and go to state 162


State 155

   50 if_block: IF '(' . expression ')' M stmt
   51         | IF '(' . expression ')' M stmt ELSE N M stmt

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    expression       go to state 163
    sub_expr         go to state 164
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 156

   49 for_block: FOR '(' . expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64
    ';'             shift, and go to state 165

    expression_stmt  go to state 166
    expression       go to state 167
    sub_expr         go to state 164
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 157

   54 while_block: WHILE M . '(' expression ')' M $@6 stmt $@7

    '('  shift, and go to state 168


State 158

   44 single_stmt: CONTINUE ';' .

    $default  reduce using rule 44 (single_stmt)


State 159

   45 single_stmt: BREAK ';' .

    $default  reduce using rule 45 (single_stmt)


State 160

   43 single_stmt: RETURN ';' .

    $default  reduce using rule 43 (single_stmt)


State 161

   46 single_stmt: RETURN sub_expr . ';'
   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr

    LOGICAL_AND  shift, and go to state 110
    LOGICAL_OR   shift, and go to state 111
    LS_EQ        shift, and go to state 112
    GR_EQ        shift, and go to state 113
    EQ           shift, and go to state 114
    NOT_EQ       shift, and go to state 115
    '<'          shift, and go to state 116
    '>'          shift, and go to state 117
    ';'          shift, and go to state 169


State 162

   42 single_stmt: function_call ';' .

    $default  reduce using rule 42 (single_stmt)


State 163

   50 if_block: IF '(' expression . ')' M stmt
   51         | IF '(' expression . ')' M stmt ELSE N M stmt
   65 expression: expression . ',' sub_expr

    ','  shift, and go to state 170
    ')'  shift, and go to state 171


State 164

   66 expression: sub_expr .
   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr

    LOGICAL_AND  shift, and go to state 110
    LOGICAL_OR   shift, and go to state 111
    LS_EQ        shift, and go to state 112
    GR_EQ        shift, and go to state 113
    EQ           shift, and go to state 114
    NOT_EQ       shift, and go to state 115
    '<'          shift, and go to state 116
    '>'          shift, and go to state 117

    $default  reduce using rule 66 (expression)


State 165

   64 expression_stmt: ';' .

    $default  reduce using rule 64 (expression_stmt)


State 166

   49 for_block: FOR '(' expression_stmt . M expression_stmt M expression ')' $@4 N M stmt $@5

    $default  reduce using rule 118 (M)

    M  go to state 172


State 167

   63 expression_stmt: expression . ';'
   65 expression: expression . ',' sub_expr

    ','  shift, and go to state 170
    ';'  shift, and go to state 173


State 168

   54 while_block: WHILE M '(' . expression ')' M $@6 stmt $@7

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    expression       go to state 174
    sub_expr         go to state 164
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 169

   46 single_stmt: RETURN sub_expr ';' .

    $default  reduce using rule 46 (single_stmt)


State 170

   65 expression: expression ',' . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    sub_expr         go to state 175
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 171

   50 if_block: IF '(' expression ')' . M stmt
   51         | IF '(' expression ')' . M stmt ELSE N M stmt

    $default  reduce using rule 118 (M)

    M  go to state 176


State 172

   49 for_block: FOR '(' expression_stmt M . expression_stmt M expression ')' $@4 N M stmt $@5

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64
    ';'             shift, and go to state 165

    expression_stmt  go to state 177
    expression       go to state 167
    sub_expr         go to state 164
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 173

   63 expression_stmt: expression ';' .

    $default  reduce using rule 63 (expression_stmt)


State 174

   54 while_block: WHILE M '(' expression . ')' M $@6 stmt $@7
   65 expression: expression . ',' sub_expr

    ','  shift, and go to state 170
    ')'  shift, and go to state 178


State 175

   65 expression: expression ',' sub_expr .
   67 sub_expr: sub_expr . '>' sub_expr
   68         | sub_expr . '<' sub_expr
   69         | sub_expr . EQ sub_expr
   70         | sub_expr . NOT_EQ sub_expr
   71         | sub_expr . GR_EQ sub_expr
   72         | sub_expr . LS_EQ sub_expr
   73         | sub_expr . LOGICAL_AND M sub_expr
   74         | sub_expr . LOGICAL_OR M sub_expr

    LOGICAL_AND  shift, and go to state 110
    LOGICAL_OR   shift, and go to state 111
    LS_EQ        shift, and go to state 112
    GR_EQ        shift, and go to state 113
    EQ           shift, and go to state 114
    NOT_EQ       shift, and go to state 115
    '<'          shift, and go to state 116
    '>'          shift, and go to state 117

    $default  reduce using rule 65 (expression)


State 176

   50 if_block: IF '(' expression ')' M . stmt
   51         | IF '(' expression ')' M . stmt ELSE N M stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 139
    FOR         shift, and go to state 140
    WHILE       shift, and go to state 141
    CONTINUE    shift, and go to state 142
    BREAK       shift, and go to state 143
    RETURN      shift, and go to state 144
    '{'         shift, and go to state 131

    type              go to state 145
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 179
    compound_stmt     go to state 147
    single_stmt       go to state 148
    for_block         go to state 149
    if_block          go to state 150
    while_block       go to state 151
    declaration       go to state 152
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 153
    array_access      go to state 28
    function_call     go to state 154


State 177

   49 for_block: FOR '(' expression_stmt M expression_stmt . M expression ')' $@4 N M stmt $@5

    $default  reduce using rule 118 (M)

    M  go to state 180


State 178

   54 while_block: WHILE M '(' expression ')' . M $@6 stmt $@7

    $default  reduce using rule 118 (M)

    M  go to state 181


State 179

   50 if_block: IF '(' expression ')' M stmt .
   51         | IF '(' expression ')' M stmt . ELSE N M stmt

    ELSE  shift, and go to state 182

    $default  reduce using rule 50 (if_block)


State 180

   49 for_block: FOR '(' expression_stmt M expression_stmt M . expression ')' $@4 N M stmt $@5

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 59
    HEX_CONSTANT    shift, and go to state 60
    CHAR_CONSTANT   shift, and go to state 61
    FLOAT_CONSTANT  shift, and go to state 62
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 63
    '!'             shift, and go to state 91
    '('             shift, and go to state 64

    expression       go to state 183
    sub_expr         go to state 164
    assignment_expr  go to state 94
    unary_expr       go to state 95
    lhs              go to state 26
    identifier       go to state 96
    arithmetic_expr  go to state 97
    constant         go to state 68
    array_access     go to state 98


State 181

   54 while_block: WHILE M '(' expression ')' M . $@6 stmt $@7

    $default  reduce using rule 52 ($@6)

    $@6  go to state 184


State 182

   51 if_block: IF '(' expression ')' M stmt ELSE . N M stmt

    $default  reduce using rule 119 (N)

    N  go to state 185


State 183

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression . ')' $@4 N M stmt $@5
   65 expression: expression . ',' sub_expr

    ','  shift, and go to state 170
    ')'  shift, and go to state 186


State 184

   54 while_block: WHILE M '(' expression ')' M $@6 . stmt $@7

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 139
    FOR         shift, and go to state 140
    WHILE       shift, and go to state 141
    CONTINUE    shift, and go to state 142
    BREAK       shift, and go to state 143
    RETURN      shift, and go to state 144
    '{'         shift, and go to state 131

    type              go to state 145
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 187
    compound_stmt     go to state 147
    single_stmt       go to state 148
    for_block         go to state 149
    if_block          go to state 150
    while_block       go to state 151
    declaration       go to state 152
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 153
    array_access      go to state 28
    function_call     go to state 154


State 185

   51 if_block: IF '(' expression ')' M stmt ELSE N . M stmt

    $default  reduce using rule 118 (M)

    M  go to state 188


State 186

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' . $@4 N M stmt $@5

    $default  reduce using rule 47 ($@4)

    $@4  go to state 189


State 187

   54 while_block: WHILE M '(' expression ')' M $@6 stmt . $@7

    $default  reduce using rule 53 ($@7)

    $@7  go to state 190


State 188

   51 if_block: IF '(' expression ')' M stmt ELSE N M . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 139
    FOR         shift, and go to state 140
    WHILE       shift, and go to state 141
    CONTINUE    shift, and go to state 142
    BREAK       shift, and go to state 143
    RETURN      shift, and go to state 144
    '{'         shift, and go to state 131

    type              go to state 145
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 191
    compound_stmt     go to state 147
    single_stmt       go to state 148
    for_block         go to state 149
    if_block          go to state 150
    while_block       go to state 151
    declaration       go to state 152
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 153
    array_access      go to state 28
    function_call     go to state 154


State 189

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 . N M stmt $@5

    $default  reduce using rule 119 (N)

    N  go to state 192


State 190

   54 while_block: WHILE M '(' expression ')' M $@6 stmt $@7 .

    $default  reduce using rule 54 (while_block)


State 191

   51 if_block: IF '(' expression ')' M stmt ELSE N M stmt .

    $default  reduce using rule 51 (if_block)


State 192

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N . M stmt $@5

    $default  reduce using rule 118 (M)

    M  go to state 193


State 193

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M . stmt $@5

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 139
    FOR         shift, and go to state 140
    WHILE       shift, and go to state 141
    CONTINUE    shift, and go to state 142
    BREAK       shift, and go to state 143
    RETURN      shift, and go to state 144
    '{'         shift, and go to state 131

    type              go to state 145
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 194
    compound_stmt     go to state 147
    single_stmt       go to state 148
    for_block         go to state 149
    if_block          go to state 150
    while_block       go to state 151
    declaration       go to state 152
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 153
    array_access      go to state 28
    function_call     go to state 154


State 194

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt . $@5

    $default  reduce using rule 48 ($@5)

    $@5  go to state 195


State 195

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5 .

    $default  reduce using rule 49 (for_block)
